#!/usr/bin/env python
#coding=utf-8
__author__ = 'M0nsieurPsych0'

from base64 import b64decode

class WritePayload():
    def __init__(self):
        # self.payload = ""
        self.payload = ""
    
    def _writePayload(self, filename, payload):
        # "Créer un nouveau fichier à partir du payload d'une string en base64"
        with open(f"{filename}", "wb") as copy:
            copy.write(b64decode(payload))

    def main(self):
        self._writePayload("test.png", self.payload)

if __name__ == "__main__":
    WritePayload().main()